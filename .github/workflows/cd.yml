name: CD - Deploy to Google Cloud VM (Staging Only)

on:
  push:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: joomla-app
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  ZONE: ${{ secrets.GCP_ZONE }}

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Joomla Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} .
        docker save ${{ env.DOCKER_IMAGE }}:${{ github.sha }} > joomla-image.tar

    - name: Create deployment package
      run: |
        # Create deployment directory
        mkdir -p deployment
        
        # Copy necessary files
        cp joomla-image.tar deployment/
        cp docker-compose.prod.yml deployment/docker-compose.yml
        cp deploy/scripts/deploy.sh deployment/
        cp deploy/scripts/setup-vm.sh deployment/
        
        # Create deployment archive
        tar -czf deployment-package.tar.gz deployment/

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment-package.tar.gz
        retention-days: 30

  deploy:
    name: Deploy to Google Cloud VM
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: http://${{ steps.get-ip.outputs.vm-ip }}
    
    steps:
    - name: Google Auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Get VM IP
      id: get-ip
      run: |
        VM_IP=$(gcloud compute instances describe joomla-staging \
          --zone=${{ env.ZONE }} \
          --format="get(networkInterfaces[0].accessConfigs[0].natIP)")
        echo "vm-ip=$VM_IP" >> $GITHUB_OUTPUT
        echo "VM IP: $VM_IP"

    - name: Download deployment artifact
      uses: actions/download-artifact@v3
      with:
        name: deployment-package

    - name: Deploy to VM
      env:
        VM_IP: ${{ steps.get-ip.outputs.vm-ip }}
        MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        MYSQL_USER: ${{ secrets.MYSQL_USER }}
        MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      run: |
        # Setup SSH using gcloud
        gcloud compute config-ssh

        # Copy deployment package to VM
        gcloud compute scp deployment-package.tar.gz joomla-staging:/tmp/ --zone=${{ env.ZONE }}

        # Deploy on VM
        gcloud compute ssh joomla-staging --zone=${{ env.ZONE }} --command="
          set -e
          
          # Extract deployment package
          cd /tmp
          tar -xzf deployment-package.tar.gz
          cd deployment
          
          # Make scripts executable
          chmod +x deploy.sh setup-vm.sh
          
          # Run deployment script
          sudo ./deploy.sh staging \
            '${{ env.MYSQL_ROOT_PASSWORD }}' \
            '${{ env.MYSQL_DATABASE }}' \
            '${{ env.MYSQL_USER }}' \
            '${{ env.MYSQL_PASSWORD }}' \
            '${{ github.sha }}'
          
          echo 'Deployment completed successfully'
        "

  notify:
    name: Notify Deployment
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify success
      if: needs.deploy.result == 'success'
      run: |
        echo "üéâ Google Cloud VM deployment successful!"
        echo "üìç Staging URL: http://${{ needs.deploy.outputs.vm-ip || 'Check logs for IP' }}"
        echo "üîß Access your Joomla site and complete the installation wizard"
        
    - name: Notify failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå Google Cloud VM deployment failed!"
        echo "üîç Check the workflow logs for details"